/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.mobile_live_widgets_prod.liveblob.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobile_live_widgets_prod.liveblob.CameraImage;
import com.mobile_live_widgets_prod.liveblob.service.CameraImageService;


/**
 * Controller object for domain model class CameraImage.
 * @see CameraImage
 */
@RestController("liveBlob.CameraImageController")
@Api(value = "CameraImageController", description = "Exposes APIs to work with CameraImage resource.")
@RequestMapping("/liveBlob/CameraImage")
public class CameraImageController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CameraImageController.class);

    @Autowired
	@Qualifier("liveBlob.CameraImageService")
	private CameraImageService cameraImageService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CameraImage instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CameraImage createCameraImage(@RequestPart("wm_data_json") CameraImage cameraImage, @RequestPart(value = "image", required = false) MultipartFile _image) {
		LOGGER.debug("Create CameraImage with information: {}" , cameraImage);

    cameraImage.setImage(WMMultipartUtils.toByteArray(_image));
		cameraImage = cameraImageService.create(cameraImage);
		LOGGER.debug("Created CameraImage with information: {}" , cameraImage);

	    return cameraImage;
	}

    @ApiOperation(value = "Returns the CameraImage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CameraImage getCameraImage(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting CameraImage with id: {}" , id);

        CameraImage foundCameraImage = cameraImageService.getById(id);
        LOGGER.debug("CameraImage details with id: {}" , foundCameraImage);

        return foundCameraImage;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in CameraImage instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getCameraImageBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in CameraImage instance" , fieldName);

        if(!WMRuntimeUtils.isLob(CameraImage.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        CameraImage cameraImage = cameraImageService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(cameraImage, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the CameraImage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CameraImage editCameraImage(@PathVariable("id") Integer id, @RequestBody CameraImage cameraImage) {
        LOGGER.debug("Editing CameraImage with id: {}" , cameraImage.getId());

        cameraImage.setId(id);
        cameraImage = cameraImageService.update(cameraImage);
        LOGGER.debug("CameraImage details with id: {}" , cameraImage);

        return cameraImage;
    }
    
    @ApiOperation(value = "Partially updates the CameraImage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CameraImage patchCameraImage(@PathVariable("id") Integer id, @RequestBody @MapTo(CameraImage.class) Map<String, Object> cameraImagePatch) {
        LOGGER.debug("Partially updating CameraImage with id: {}" , id);

        CameraImage cameraImage = cameraImageService.partialUpdate(id, cameraImagePatch);
        LOGGER.debug("CameraImage details after partial update: {}" , cameraImage);

        return cameraImage;
    }

    @ApiOperation(value = "Updates the CameraImage instance associated with the given id.This API should be used when CameraImage instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CameraImage editCameraImage(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        CameraImage newCameraImage = WMMultipartUtils.toObject(multipartHttpServletRequest, CameraImage.class, "liveBlob");
        newCameraImage.setId(id);

        CameraImage oldCameraImage = cameraImageService.getById(id);
        WMMultipartUtils.updateLobsContent(oldCameraImage, newCameraImage);
        LOGGER.debug("Updating CameraImage with information: {}" , newCameraImage);

        return cameraImageService.update(newCameraImage);
    }

    @ApiOperation(value = "Deletes the CameraImage instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCameraImage(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting CameraImage with id: {}" , id);

        CameraImage deletedCameraImage = cameraImageService.delete(id);

        return deletedCameraImage != null;
    }

    /**
     * @deprecated Use {@link #findCameraImages(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CameraImage instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<CameraImage> searchCameraImagesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CameraImages list by query filter:{}", (Object) queryFilters);
        return cameraImageService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CameraImage instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CameraImage> findCameraImages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CameraImages list by filter:", query);
        return cameraImageService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CameraImage instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<CameraImage> filterCameraImages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CameraImages list by filter", query);
        return cameraImageService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportCameraImages(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cameraImageService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportCameraImagesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CameraImage.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> cameraImageService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CameraImage instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countCameraImages( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CameraImages");
		return cameraImageService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getCameraImageAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cameraImageService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CameraImageService instance
	 */
	protected void setCameraImageService(CameraImageService service) {
		this.cameraImageService = service;
	}

}