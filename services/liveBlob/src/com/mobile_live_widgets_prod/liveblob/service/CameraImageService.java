/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.mobile_live_widgets_prod.liveblob.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobile_live_widgets_prod.liveblob.CameraImage;

/**
 * Service object for domain model class {@link CameraImage}.
 */
public interface CameraImageService {

    /**
     * Creates a new CameraImage. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CameraImage if any.
     *
     * @param cameraImage Details of the CameraImage to be created; value cannot be null.
     * @return The newly created CameraImage.
     */
    CameraImage create(@Valid CameraImage cameraImage);


	/**
     * Returns CameraImage by given id if exists.
     *
     * @param cameraimageId The id of the CameraImage to get; value cannot be null.
     * @return CameraImage associated with the given cameraimageId.
	 * @throws EntityNotFoundException If no CameraImage is found.
     */
    CameraImage getById(Integer cameraimageId);

    /**
     * Find and return the CameraImage by given id if exists, returns null otherwise.
     *
     * @param cameraimageId The id of the CameraImage to get; value cannot be null.
     * @return CameraImage associated with the given cameraimageId.
     */
    CameraImage findById(Integer cameraimageId);

	/**
     * Find and return the list of CameraImages by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param cameraimageIds The id's of the CameraImage to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CameraImages associated with the given cameraimageIds.
     */
    List<CameraImage> findByMultipleIds(List<Integer> cameraimageIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CameraImage. It replaces all fields of the existing CameraImage with the given cameraImage.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CameraImage if any.
     *
     * @param cameraImage The details of the CameraImage to be updated; value cannot be null.
     * @return The updated CameraImage.
     * @throws EntityNotFoundException if no CameraImage is found with given input.
     */
    CameraImage update(@Valid CameraImage cameraImage);


    /**
     * Partially updates the details of an existing CameraImage. It updates only the
     * fields of the existing CameraImage which are passed in the cameraImagePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CameraImage if any.
     *
     * @param cameraimageId The id of the CameraImage to be deleted; value cannot be null.
     * @param cameraImagePatch The partial data of CameraImage which is supposed to be updated; value cannot be null.
     * @return The updated CameraImage.
     * @throws EntityNotFoundException if no CameraImage is found with given input.
     */
    CameraImage partialUpdate(Integer cameraimageId, Map<String, Object> cameraImagePatch);

    /**
     * Deletes an existing CameraImage with the given id.
     *
     * @param cameraimageId The id of the CameraImage to be deleted; value cannot be null.
     * @return The deleted CameraImage.
     * @throws EntityNotFoundException if no CameraImage found with the given id.
     */
    CameraImage delete(Integer cameraimageId);

    /**
     * Deletes an existing CameraImage with the given object.
     *
     * @param cameraImage The instance of the CameraImage to be deleted; value cannot be null.
     */
    void delete(CameraImage cameraImage);

    /**
     * Find all CameraImages matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CameraImages.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CameraImage> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CameraImages matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CameraImages.
     *
     * @see Pageable
     * @see Page
     */
    Page<CameraImage> findAll(String query, Pageable pageable);

    /**
     * Exports all CameraImages matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CameraImages matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CameraImages in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CameraImage.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}