/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.mobile_live_widgets_prod.liveblob.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobile_live_widgets_prod.liveblob.CameraImage;


/**
 * ServiceImpl object for domain model class CameraImage.
 *
 * @see CameraImage
 */
@Service("liveBlob.CameraImageService")
@Validated
public class CameraImageServiceImpl implements CameraImageService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CameraImageServiceImpl.class);


    @Autowired
    @Qualifier("liveBlob.CameraImageDao")
    private WMGenericDao<CameraImage, Integer> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CameraImage, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "liveBlobTransactionManager")
    @Override
    public CameraImage create(CameraImage cameraImage) {
        LOGGER.debug("Creating a new CameraImage with information: {}", cameraImage);

        CameraImage cameraImageCreated = this.wmGenericDao.create(cameraImage);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(cameraImageCreated);
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager")
    @Override
    public CameraImage getById(Integer cameraimageId) {
        LOGGER.debug("Finding CameraImage by id: {}", cameraimageId);
        return this.wmGenericDao.findById(cameraimageId);
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager")
    @Override
    public CameraImage findById(Integer cameraimageId) {
        LOGGER.debug("Finding CameraImage by id: {}", cameraimageId);
        try {
            return this.wmGenericDao.findById(cameraimageId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CameraImage found with id: {}", cameraimageId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager")
    @Override
    public List<CameraImage> findByMultipleIds(List<Integer> cameraimageIds, boolean orderedReturn) {
        LOGGER.debug("Finding CameraImages by ids: {}", cameraimageIds);

        return this.wmGenericDao.findByMultipleIds(cameraimageIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "liveBlobTransactionManager")
    @Override
    public CameraImage update(CameraImage cameraImage) {
        LOGGER.debug("Updating CameraImage with information: {}", cameraImage);

        this.wmGenericDao.update(cameraImage);
        this.wmGenericDao.refresh(cameraImage);

        return cameraImage;
    }

    @Transactional(value = "liveBlobTransactionManager")
    @Override
    public CameraImage partialUpdate(Integer cameraimageId, Map<String, Object>cameraImagePatch) {
        LOGGER.debug("Partially Updating the CameraImage with id: {}", cameraimageId);

        CameraImage cameraImage = getById(cameraimageId);

        try {
            ObjectReader cameraImageReader = this.objectMapper.readerForUpdating(cameraImage);
            cameraImage = cameraImageReader.readValue(this.objectMapper.writeValueAsString(cameraImagePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", cameraImagePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        cameraImage = update(cameraImage);

        return cameraImage;
    }

    @Transactional(value = "liveBlobTransactionManager")
    @Override
    public CameraImage delete(Integer cameraimageId) {
        LOGGER.debug("Deleting CameraImage with id: {}", cameraimageId);
        CameraImage deleted = this.wmGenericDao.findById(cameraimageId);
        if (deleted == null) {
            LOGGER.debug("No CameraImage found with id: {}", cameraimageId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CameraImage.class.getSimpleName(), cameraimageId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "liveBlobTransactionManager")
    @Override
    public void delete(CameraImage cameraImage) {
        LOGGER.debug("Deleting CameraImage with {}", cameraImage);
        this.wmGenericDao.delete(cameraImage);
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager")
    @Override
    public Page<CameraImage> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CameraImages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager")
    @Override
    public Page<CameraImage> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CameraImages");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service liveBlob for table CameraImage to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service liveBlob for table CameraImage to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "liveBlobTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}