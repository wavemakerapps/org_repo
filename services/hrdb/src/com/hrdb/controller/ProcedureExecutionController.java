/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.hrdb.service.HrdbProcedureExecutorService;
import com.hrdb.models.procedure.*;

@RestController(value = "Hrdb.ProcedureExecutionController")
@RequestMapping("/hrdb/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private HrdbProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/Proc_data", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Proc_data")
    public ProcDataResponse executeProc_data(@RequestParam(value = "B_ADDR") Integer baddr, @RequestParam(value = "B_COUNT") Integer bcount, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Proc_data");
        ProcDataResponse _result = procedureService.executeProc_data(baddr, bcount);
        LOGGER.debug("got the result for named procedure: Proc_data, result:{}", _result);
        return _result;
    }

}